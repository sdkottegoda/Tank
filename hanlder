using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;

namespace Shooter
{
    class Handler
    {
        public Tank[] tanks;
        public List<Obstacle> obstacles;
        public Client client;
        public String serverReply;
        public List<Coins> coinPiles;
        public List<LifePack> lifePacks;
        public String indicator;
        public Box[,] grid2;
        public String nextMove;
        public Vector2 position;
        public int playerNum;
        public List<Bullet> bullets;
        public SortedList<int,LinkedList<Box>> paths;

        MyPathNode[,] grid = new MyPathNode[20, 20];

        public Handler()
        {
            client = new Client();
            //tanks = new Tank[5];
            obstacles = new List<Obstacle>();
            coinPiles = new List<Coins>();
            lifePacks = new List<LifePack>();
            grid2 = new Box[21, 21];
            bullets = new List<Bullet>();
            paths = new SortedList<int,LinkedList<Box>>();
        }

        public Boolean join(Rectangle aScreen)
        {
            this.send("JOIN#");
            //serverReply = this.receive();
            return this.receive(aScreen);

            //if (serverReply.ElementAt<char>(0)=='I')
            //{
            //    createObstacles();
            //    createTanks(aScreen);
            //    return true;
            //}
            //else
            //{   
            //    return false;
            //}
        }
        public void createTanks(Rectangle gameScreen)
        {
            /*for (int i = 0; i < 5; i++)
            {
                tanks[i] = new Tank(i);

            }
            tanks[0].color = Color.Blue;
            tanks[1].color = Color.Green;
            tanks[2].color = Color.Red;
            tanks[3].color = Color.Yellow;
            tanks[4].color = Color.Magenta;

            tanks[0].position = new Vector2(0 + gameScreen.Left, 0 + gameScreen.Top);
            tanks[1].position = new Vector2(0 + gameScreen.Left, 570 + gameScreen.Top);
            tanks[4].position = new Vector2(300 + gameScreen.Left, 300 + gameScreen.Top);
            tanks[2].position = new Vector2(570 + gameScreen.Left, 0 + gameScreen.Top);
            tanks[3].position = new Vector2(570 + gameScreen.Left, 570 + gameScreen.Top);
            */
            Color[] colors = new Color[] { Color.Blue, Color.Green, Color.Red, Color.Yellow, Color.Magenta };

            String[] players = serverReply.Split(':');
            tanks = new Tank[players.Length - 1];
            for (int i = 1; i < players.Length; i++)
            {
                tanks[i - 1] = new Tank(players[i].ElementAt(1) - 48, colors[i - 1], new Vector2(players[i].ElementAt(3) - 48, players[i].ElementAt(5) - 48), players[i].ElementAt(players[i].Length - 1) - 48);
                //Console.WriteLine(tanks[i-1].direction);
            }
        }

        public Boolean receive(Rectangle aScreen)
        {
            String reply = this.client.receive();
            Console.WriteLine(reply);
            indicator = reply.Substring(0, 2);
            if (indicator == "I:" || indicator == "G:" || indicator == "S:" || indicator == "C:" || indicator == "L:")
            {
                serverReply = reply;
                return this.processReply(aScreen);
            }
            else
            {
                return false;
            }
            //return reply;
        }

        public Boolean processReply(Rectangle aScreen)
        {
            indicator = serverReply.Substring(0, 2);
            if (indicator == "I:" || indicator == "G:" || indicator == "S:" || indicator == "C:" || indicator == "L:")
            {
                if (indicator == "I:")
                {
                    //createTanks(aScreen);
                    playerNum = serverReply.ElementAt<char>(serverReply.IndexOf('P') + 1) - 48;
                    createObstacles();
                }
                else if (indicator == "G:")
                {
                    //updateTanks();
                    //updateObstacles();
                    update();
                }
                else if (indicator == "S:")
                {
                    createTanks(aScreen);
                }
                else if (indicator == "C:")
                {
                    createCoinPile();
                }
                else
                {
                    createLifePack();
                }
                //createObstacles();
                //createTanks(aScreen);
                return true;
            }
            else
            {
                return false;
            }
        }

        public void createCoinPile()
        {
            String[] parts = serverReply.Split(':');
            String[] pos = parts[1].Split(',');
            /*for (int i = 0; i < coinPiles.Count; i++)
            {

                Coins pile = coinPiles.ElementAt(i);
                if (!pile.isAlive)
                {
                    coinPiles.Remove(pile);
                }
            }*/
            coinPiles.Add(new Coins(int.Parse(parts[2]), int.Parse(parts[3]), new Vector2(int.Parse(pos[0]), int.Parse(pos[1]))));
        }

        

        public int updateCoinPile(int aTime)
        {
            int count = coinPiles.Count;
            for (int i = 0; i < count; i++)
            {
                Coins pile = coinPiles.ElementAt(i);
                if (pile != null)
                {
                    pile.spentTime += aTime;
                    if (pile.spentTime >= pile.lifeTime)
                    {
                        pile.isAlive = false;
                        coinPiles.Remove(pile);
                        count--;
                    }
                    for (int j = 0; j < tanks.Length; j++)
                    {
                        if (tanks[j].position == pile.position)
                        {
                            pile.isAlive = false;
                            coinPiles.Remove(pile);
                            count--;
                        }
                    }
                }
            }
            return coinPiles.Count;
        }

        public int updateLifePacks(int aTime)
        {
            int count = lifePacks.Count;
            for (int i = 0; i < count; i++)
            {
                LifePack pack = lifePacks.ElementAt(i);
                if (pack != null)
                {
                    pack.spentTime += aTime;
                    if (pack.spentTime >= pack.lifeTime)
                    {
                        pack.isAlive = false;
                        lifePacks.Remove(pack);
                        count--;
                    }
                    for (int j = 0; j < tanks.Length; j++)
                    {
                        if (tanks[j].position == pack.position)
                        {
                            pack.isAlive = false;
                            lifePacks.Remove(pack);
                            count--;
                        }
                    }
                }
            }
            return lifePacks.Count;
        }

        public void createLifePack()
        {
            String[] parts = serverReply.Split(':');
            String[] pos = parts[1].Split(',');
            //int count = lifePacks.Count;
            /*for (int i = 0; i < lifePacks.Count; i++)
            {
                LifePack pack = lifePacks.ElementAt(i);
                if (!pack.isAlive)
                {
                    lifePacks.Remove(pack);
                }
            }*/
            lifePacks.Add(new LifePack(int.Parse(parts[2]), new Vector2(int.Parse(pos[0]), int.Parse(pos[1]))));
        }

        public void moveTank()
        {
            this.findPath();
            this.findNext();
            client.send(nextMove);
            this.client.receive();
        }


        public void shoot()
        {
            client.send("SHOOT#");
            client.receive();
        }

        public void update()
        {
            String[] parts = serverReply.Split(':');
            String[] playerParts = new String[7];
            for (int i = 1; i < parts.Length; i++)
                if (parts[i].ElementAt(0) == 'P')
                {
                    playerParts = parts[i].Split(';');
                    grid[(int)tanks[i - 1].position.X, (int)tanks[i - 1].position.Y].IsWall = false; ;
                    Vector2 pos=new Vector2(playerParts[1].ElementAt(0) - 48, playerParts[1].ElementAt(2) - 48); // the position of a bullet is taken in pixels
                    tanks[i - 1].position = pos;
                    //grid2[(int)tanks[i - 1].position.X, (int)tanks[i - 1].position.Y] = new Box(1000,1000, pos);

                    grid[(int)tanks[i - 1].position.X, (int)tanks[i - 1].position.Y] = new MyPathNode()
                    {
                        IsWall = true,
                        X = (int)tanks[i - 1].position.X,
                        Y=(int)tanks[i - 1].position.Y,
                    };
                    
                    
                    int dir = Int32.Parse(playerParts[2]);
                    tanks[i - 1].direction = dir;
                    if (playerParts[3] == "0")
                    {
                        tanks[i - 1].hasShot = false;
                    }
                    else
                    {
                        tanks[i - 1].hasShot = true;
                        bullets.Add(new Bullet(dir, new Vector2(pos.X*30,pos.Y*30)));
                        
                    }
                    tanks[i - 1].health = Int32.Parse(playerParts[4]);
                    tanks[i - 1].coins = Int32.Parse(playerParts[5]);
                    tanks[i - 1].points = Int32.Parse(playerParts[2]);

                }
                else
                {
                    String[] obPos = parts[i].Split(';');
                    String[] posDir;
                    for (int j = 0; j < obPos.Length; j++)
                    {
                        posDir = obPos[j].Split(',');
                        obstacles.ElementAt(j).damageLevel = Int32.Parse(posDir[2]);
                    }
                }
            position = tanks[playerNum].position;
            //if (coinPiles.Count != 0)
            //{
               // Coins c = coinPiles.ElementAt(0);
               // Console.WriteLine(c.position.X + "\t" + c.position.Y);
                //findNext((int)c.position.X, (int)c.position.Y);
                //calAllPaths();
                //moveTank();
            //}
        }




        public void computeCost(int source_x, int source_y, int dest_x, int dest_y)
        {
            Box source = grid2[source_x, source_y];
            for (int k = source_x - 1; k <= source_x + 1; k = k + 2)
            {
                for (int l = source_y - 1; l <= source_y + 1; l = l + 2)
                {
                    if (k == source_x && l == source_y)
                    {
                        source.f = 1;
                        source.computed = true;
                    }
                    else
                    {
                        Box b = grid2[k, l];
                        if (b.computed == true)
                        {
                            source.f = b.f + 1;
                            source.computed = true;
                        }
                        else if (b.computing == true)
                        {

                        }
                        else
                        {
                            computeCost(k, l, dest_x, dest_y);
                        }
                    }
                }
            }
        }
        public void findNext(int dest_x, int dest_y)
        {
            int x = (int)position.X;
            int y = (int)position.Y;
            Box[] steps = new Box[4];
            nextMove = "LEFT#";
            Boolean found = false;
            int cost = mod(dest_x - x + dest_y - y);
            for (int i = 0; i < this.tanks.Length && i!=playerNum; i++)
            {
                if (x == tanks[i].position.X || y == tanks[i].position.Y)
                {
                    nextMove="SHOOT#";
                    found = true;
                }
            }
            if (!found)
            {
                for (int k = x - 1; k <= x + 1; k = k + 2)
                {
                    if (k == -1 || k == 21 || (grid2[k, y] != null && grid2[k, y].f < 0))
                    {
                        continue;
                    }

                    grid2[k, y] = new Box();
                    int newCost = mod(dest_x - k + dest_y - y);
                    grid2[k, y].f = newCost;
                    if (newCost < cost)
                    {
                        cost = newCost;

                    }
                }

                for (int l = y - 1; l <= y + 1; l = l + 2)
                {
                    if (l == -1 || l == 21 || (grid2[x, l] != null && grid2[x, l].f < 0))
                    {
                        continue;
                    }
                    grid2[x, l] = new Box();
                    int newCost = mod(dest_x - x + dest_y - l);
                    grid2[x, l].f = newCost;
                    if (newCost < cost)
                    {
                        cost = newCost;
                    }
                }
                if (x - 1 >= 0 && cost == grid2[x - 1, y].f)
                {
                    nextMove = "LEFT#";
                }
                else if (x + 1 <= 20 && cost == grid2[x + 1, y].f)
                {
                    nextMove = "RIGHT#";
                }
                else if (y - 1 >= 0 && cost == grid2[x, y - 1].f)
                {
                    nextMove = "UP#";
                }
                else if (y + 1 <= 20)
                {
                    nextMove = "DOWN#";
                }
                else
                {
                    nextMove = "DOWN#";
                }
            }
        }

        public int mod(int i)
        {
            if (i >= 0)
            {
                return i;
            }
            else
            {
                return (0 - i);
            }
        }
        public void updateObstacles()
        {
        }
        public void send(String aMessage)
        {
            this.client.send(aMessage);
        }

        public void createObstacles()
        {
            //obstacles = new Obstacle[195];

            if (serverReply.ElementAt<char>(0) == 'I')
            {
                ///Console.WriteLine(serverReply.IndexOf('P'));
                //Console.WriteLine(serverReply.Length);
                String positions = serverReply.Substring(serverReply.IndexOf('P') + 3, (serverReply.Length - serverReply.IndexOf('P') - 3));
                ///Console.WriteLine(positions);
                ///String[] brickPositions = new String[3];
                String[] brickPositions = positions.Split(':');
                String type = "brickWall";
                for (int i = 0; i < 3; i++)
                {
                    int j = 0;
                    while (j < brickPositions[i].Length)
                    {
                        Vector2 place = new Vector2(brickPositions[i].ElementAt(j) - 48, brickPositions[i].ElementAt(j + 2) - 48);
                        obstacles.Add(new Obstacle(type, place));
                        //grid2[(int)place.X, (int)place.Y] = new Box(1000,1000, place);
                        //Console.WriteLine(obstacles.Last().type + obstacles.Last().position.X + obstacles.Last().position.Y);
                        //grid[] = new MyPathNode();
                        grid[(int)place.X, (int)place.Y] = new MyPathNode()
                        {
                            IsWall = true,
                            X = (int)place.X,
                            Y = (int)place.Y,
                        };
                        j = j + 4;
                    }
                    if (i == 0)
                    {
                        type = "stoneWall";
                    }
                    else if (i == 1)
                    {
                        type = "water";
                    }
                    else
                    {

                    }
                    for (int k = 0; k < 20; k++)
                    {
                        for (int l = 0; l < 20; l++)
                        {
                            if (grid[k, l] == null)
                            {
                                grid[k, l] = new MyPathNode()
                                {
                                    IsWall = false,
                                    X = k,
                                    Y = l,
                                };
                            }
                        }

                    }
                }
                //CharEnumerator i = positions.GetEnumerator();
                //int j = 0;
                //String[] types = new String[] { "brickWall", "stoneWall", "water"};
                //while (i!= null)
                //{
                //    if (i.Current == ',')
                //    {
                //        j = 1;
                //        i.MoveNext();
                //    }
                //    else if (i.Current == ';')
                //    {
                //        j = 0;
                //        i.MoveNext();
                //    }
                //    else if (i.Current == ':')
                //    {
                //    }
                //}
            }
            else
            {
            }


            /*for (int i = 0; i < 10; i++)
            {
                obstacles[i] = new Obstacle("brickWall", new Vector2(0 + gameScreen.Left, (i * 30) + gameScreen.Top));
            }
            for (int i = 10; i < 20; i++)
            {
                obstacles[i] = new Obstacle("stoneWall", new Vector2(30 + gameScreen.Left, ((i - 10) * 30) + gameScreen.Top));
            }
            for (int i = 20; i < 30; i++)
            {
                obstacles[i] = new Obstacle("water", new Vector2(60 + gameScreen.Left, ((i - 20) * 30) + gameScreen.Top));
            }*/
        }
        public void findNext()
        {
            try
            {
                foreach (MyPathNode node in path)
                {

                    Vector2 p =
                        new Vector2(node.X, node.Y);
                    if (p.X == position.X)
                    {
                        if (p.Y == position.Y - 1)
                        {
                            nextMove = "UP#";
                        }
                        else if (p.Y == position.Y + 1)
                        {
                            nextMove = "DOWN#";
                        }
                        else
                        {
                            Console.WriteLine("Wrong algo!!!!!!!!!!!!!!");
                        }

                    }
                    else if (p.Y == position.Y)
                    {
                        if (p.X == position.X - 1)
                        {
                            nextMove = "LEFT#";
                        }
                        else if (p.X == position.X + 1)
                        {
                            nextMove = "RIGHT#";
                        }
                        else
                        {
                            Console.WriteLine("Wrong algo!!!!!!!!!!!!!!");
                        }
                    }
                    else
                    {
                        Console.WriteLine("Wrong algo!!!!!!!!!!!!!!");
                    }
                    break;
                }
            }
            catch (NullReferenceException e)
            {
                Console.WriteLine("No path found!!!");
                //path = aStar.Search(new Vector2(position.X, position.Y), new Vector2(10,10), null);
                //this.findNext();
            }
        }
        public void calAllPaths()
        {
            foreach (Coins pile in coinPiles)
            {
                //findPath((int)pile.position.X, (int)pile.position.Y);
            }
        }
        


        public void findPath()
        {
            //List<Box> open= new List<Box>();
            //SortedList<int, Box> closed = new SortedList<int, Box>();
            //int x=(int)position.X;
            //int y =(int)position.Y;
            //int dir = tanks[playerNum].direction;
            //int h=mod(dest_x-x)+mod(dest_y+y);
            //grid2[x, y] = new Box(h,0,new Vector2(x,y));
            //open.Add(grid2[x, y]);
            //for(int it=0;it<open.Count;it++){
                
            //    var lengths = from element in open
            //                  orderby element.f
            //                  select element;
            //    Box current = lengths.;
            //    if (current.h == 0)
            //    {
            //        break;
            //    }
            //    Box b = current;
            //    //open.RemoveAt(open.IndexOfValue(b));
            //    closed.Add(b.f, b);

            //    for (int i = -1; i < 2; i=i+2)
            //    {
            //        x=x+i;
            //        try
            //        {
            //            Box temp = grid2[x, y];
            //            if (open.ContainsValue(temp))
            //            {
            //                if (temp.c > b.c + 1 && temp.c != 1000)
            //                {
            //                    temp.c = b.c + 1;
            //                    temp.predecessor = b;
            //                }
            //            }
            //            else
            //            {
            //                open.Add(temp.f, temp);
            //                temp.predecessor = b;
            //            }
            //        }
            //        catch (NullReferenceException e)
            //        {
            //            grid2[x, y] = new Box(mod(dest_x - x) + mod(dest_y - y), b.c + 1, new Vector2(x, y));
            //            grid2[x, y].predecessor = b;
            //            open.Add(grid2[x, y].f, grid2[x, y]);
            //        }
            //        catch (IndexOutOfRangeException e)
            //        {
            //            x = x - i;
            //        }
            //    }
            //    for (int i = -1; i < 2; i = i + 2)
            //    {
            //        y = y + i;
            //        try
            //        {
            //            Box temp = grid2[x, y];
            //            if (open.ContainsValue(temp))
            //            {
            //                if (temp.c > b.c + 1 && temp.c != 1000)
            //                {
            //                    temp.c = b.c + 1;
            //                }
            //            }
            //            else
            //            {
            //                open.Add(temp.f, temp);
            //            }
            //        }
            //        catch (NullReferenceException e)
            //        {
            //            grid2[x, y] = new Box(mod(dest_x - x) + mod(dest_y - y), b.c + 1, new Vector2(x, y));
            //            open.Add(grid2[x, y].f, grid2[x, y]);
            //        }
            //        catch (IndexOutOfRangeException e)
            //        {
            //            y = y - i;
            //        }
            //    }

            //}
            //LinkedList<Box> path = new LinkedList<Box>();
            //int k=dest_x;
            //int l=dest_y;
            //path.AddFirst(grid2[dest_x,dest_y]);
            //while (grid2[k, l].predecessor!=null)
            //{
            //    Box node = grid2[k, l].predecessor;
            //    path.AddFirst(node);

            //}
            //paths.Add(grid2[dest_x,dest_y].f,path);


            aStar = new MySolver<MyPathNode, Object>(grid);
            try{
                if (coinPiles.ElementAt<Coins>(0) == null)
                {
                    Console.WriteLine("No coin piles");
                    path = aStar.Search(new Vector2(position.X, position.Y), new Vector2(10,10), null);
                }
                else
                {
                    Console.WriteLine("coin piles found");
                    path = aStar.Search(new Vector2(position.X, position.Y), coinPiles, null);
                }
            }
            catch(ArgumentOutOfRangeException e){
                Console.WriteLine("No coin piles");
                path = aStar.Search(new Vector2(position.X, position.Y), new Vector2(10,10), null);
            }
            
        }
        IEnumerable<MyPathNode> path;
        MySolver<MyPathNode, Object> aStar;
        public void updateBullets()
        {
            try
            {
                foreach (Bullet bullet in bullets)
                {
                    if (bullet.direction == 0)
                    {
                        if (bullet.position.Y <592)
                        {
                            bullet.position.Y = bullet.position.Y + 9;
                        }
                        else
                        {
                            bullets.Remove(bullet);
                        }
                    }
                    else if (bullet.direction == 1)
                    {
                        if (bullet.position.X <592)
                        {
                            bullet.position.X = bullet.position.X + 9;
                        }
                        else { bullets.Remove(bullet); }
                    }

                    else if (bullet.direction == 2)
                    {
                        if (bullet.position.Y >8)
                        {
                            bullet.position.Y = bullet.position.Y - 9;
                        }
                        else
                        {
                            bullets.Remove(bullet);
                        }
                    }
                    else if (bullet.direction == 3)
                    {
                        if (bullet.position.X >8)
                        {
                            bullet.position.X = bullet.position.X - 9;
                        }
                        else
                        {
                            bullets.Remove(bullet);
                        }
                    }
                    else
                    {
                    }
                    Console.WriteLine(bullet.position.X + "\t" + bullet.position.Y);
                }
            }
            catch(Exception e)
            {
                Console.WriteLine("Tried");
            }
        }
    }
}
